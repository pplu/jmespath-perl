#!/usr/bin/env perl

use warnings;
use strict;
use v5.10;

use Parse::RecDescent;
use JSON::MaybeXS;
use Path::Class;
use Test::More;

$::RD_HINT=0;

my $grammar = q {

expression: sub_expression(s /\\./) | index_expression | or_expression | identifier
expression: '*' | multi_select_list | multi_select_hash 
#| literal
expression: function_expression | pipe_expression | raw_string
expression: current_node

sub_expression: '.' ( expression | multi_select_list | multi_select_hash | function_expression | '*' )

pipe_expression: "|" expression

or_expression: "||" expression

and_expression: "&&" expression

not_expression: "!" expression

paren_expression: "(" expression ")"

index_expression: bracket_specifier

multi_select_list: "[" expression(s /,/) "]"

multi_select_hash: "{" keyval_expr(s /,/) "}"

keyval_expr: identifier ":" expression

bracket_specifier: "[" ( number | "*" | slice_expression ) "]" | flatten_list | filter_list

flatten_list: "[]"

filter_list: "[?" expression "]"

comparator_expression: expression comparator expression

slice_expression: number(?) ":" number(?) optional_slice(?)

optional_slice: ":" number

comparator: "<" | "<=" | "==" | ">=" | ">" | "!="

function_expression: unquoted_string ( no_args | one_or_more_args )

no_args: "(" ")"

one_or_more_args: "(" function_arg(s) ")"

function_arg: expression | expression_type

current_node: "@"

expression_type: "&" expression

raw_string: "'" raw_string_chars "'"

raw_string_chars: /[^']*/

#literal: "`" json_value "`"

unescaped_literal: /[a-zA-Z0-9]*/

escaped_literal: escaped_char | escape

number: /-?[0-9]+/ 

identifier: unquoted_string | quoted_string

unquoted_string: /[A-Za-z_][A-Za-z0-9_]*/

quoted_string: '"' escaped_and_unescaped(s) '"'

escaped_and_unescaped: unescaped_char | escaped_char

unescaped_char: /A-Za-z0-9/

escape: '\\'

escaped_char: escape /["\/bfnrt\\\\]/

};

my $parser = Parse::RecDescent->new($grammar); 
#Parse::RecDescent->Precompile(
#  { },
#  $grammar, 
#  "JmesPath"
#);
#
#use JmesPath;
#my $parser = JmesPath->new;

my $testdir = dir("jmespath.test/tests");
 
foreach my $file (grep { /\.json$/ } $testdir->children) {
  diag "Tests in file $file";
  my $test_struct = decode_json($file->slurp);

  foreach my $test (@$test_struct) {
    my $given = $test->{ given };

    foreach my $case (@{ $test->{ cases } }) {
      my $expression = $case->{ expression };
      my $error = $case->{ error };

      my $tree = $parser->expression($expression);
      if (not defined $tree) {
        if (defined $error) { pass("The parser failed as expected for $expression") } 
        else { fail("The parser didn't fail as expected for $expression") }
      } else {
        if (not defined $error) { pass("The parser passed as expected for $expression") } 
        else { fail("The parser didn't pass as expected for $expression") }
      }

      my $expected_result = $case->{ result };
      if (defined $expected_result) {
        is_deeply(undef, $expected_result, "Evaluation of $expression rendered expected result");
      }
    }
  }
}

done_testing;
